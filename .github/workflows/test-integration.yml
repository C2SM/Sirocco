name: test-integration

on:
  push:
    # only pushes to main trigger
    branches: [main]
  pull_request:
    # always triggered

jobs:
  integration_test:
    runs-on: ubuntu-latest
    timeout-minutes: 120 # when icon needs to be rebuild it can take 70 minutes
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        aiida-version: ['stable']

    permissions:
      packages: write

    steps:
    - name: Check access to GitHub secrets
      run: echo "Pull request that trigger this workflow need to be on upstream repo to access GitHub secrets."; exit 1
      # if a pull request is merged from a fork
      if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork

    - uses: actions/checkout@v4

    - name: Set up Spack
      uses: spack/setup-spack@v2
      with:
        buildcache: true

    - name: Install Python and ICON
      env:
        SPACK_OCI_USER: leclairm
        SPACK_OCI_TOKEN: ${{ secrets.SPACK_OCI_TOKEN }}
      run: |
        sudo apt install gcc-11 g++-11 gfortran-11 graphviz graphviz-dev
        spack -e . add python@${{matrix.python-version}}
        spack -e . install

    - name: Push installation to buildcache and update index
      env:
        SPACK_OCI_USER: leclairm
        SPACK_OCI_TOKEN: ${{ secrets.SPACK_OCI_TOKEN }}
      run: spack -e . buildcache push --base-image ubuntu:latest --update-index local-buildcache
      if: ${{ !cancelled() }}

    - name: Install hatch
      shell: spack-bash {0}
      run: |
        spack env activate .
        pip install --upgrade pip
        pip install hatch
        hatch run verdi presto
    - name: Install and Configure SLURM
      run: |
        echo "Installing SLURM..."
        sudo apt-get update
        sudo apt-get install -y slurm-wlm slurm-wlm-doc munge

        # Get the runner hostname
        HOSTNAME=$(hostname)
        echo "Hostname: $HOSTNAME"

        # Configure munge (authentication service)
        sudo systemctl enable munge
        sudo systemctl start munge

        # Create SLURM user if it doesn't exist
        sudo id slurm &>/dev/null || sudo useradd --system --shell /bin/false slurm

        # Create necessary directories
        sudo mkdir -p /var/spool/slurm-llnl
        sudo mkdir -p /var/log/slurm-llnl
        sudo chown slurm:slurm /var/spool/slurm-llnl
        sudo chown slurm:slurm /var/log/slurm-llnl

        # Create SLURM configuration
        sudo tee /etc/slurm-llnl/slurm.conf > /dev/null << EOF
        # SLURM configuration for CI testing
        ClusterName=ci-cluster
        ControlMachine=$HOSTNAME
        ControlAddr=$HOSTNAME

        # Authentication
        AuthType=auth/munge

        # Scheduling
        SchedulerType=sched/backfill
        SelectType=select/cons_tres
        SelectTypeParameters=CR_Core

        # Logging
        SlurmctldLogFile=/var/log/slurm-llnl/slurmctld.log
        SlurmdLogFile=/var/log/slurm-llnl/slurmd.log

        # Process tracking
        ProctrackType=proctrack/cgroup
        TaskPlugin=task/affinity,task/cgroup

        # Node and partition configuration
        NodeName=$HOSTNAME CPUs=2 Sockets=1 CoresPerSocket=2 ThreadsPerCore=1 RealMemory=7000 State=UNKNOWN
        PartitionName=debug Nodes=$HOSTNAME Default=YES MaxTime=INFINITE State=UP
        EOF

        # Create cgroup configuration
        sudo tee /etc/slurm-llnl/cgroup.conf > /dev/null << EOF
        CgroupAutomount=yes
        ConstrainCores=yes
        ConstrainRAMSpace=yes
        EOF

        # Start SLURM services
        echo "Starting SLURM services..."
        sudo systemctl enable slurmctld
        sudo systemctl start slurmctld
        sudo systemctl enable slurmd
        sudo systemctl start slurmd

        # Wait for services to be ready
        echo "Waiting for SLURM services to be ready..."
        timeout 30 bash -c 'until sinfo &>/dev/null; do sleep 1; done'

        # Check SLURM status
        echo "SLURM Status:"
        sinfo
        squeue

        echo "SLURM installation and configuration complete!"

    - name: Run ICON tests
      shell: spack-bash {0}
      env:
        PYTEST_ADDOPTS: "--durations=0"
      run: |
        spack env activate .
        hatch test -m "requires_icon" --parallel tests
    - name: Setup upterm session
      uses: lhotari/action-upterm@v1
      if: failure()
