# Include external CI template from CSCS
include:
  - remote: 'https://gitlab.com/cscs-ci/recipes/-/raw/master/templates/v2/.ci-ext.yml'

# Defines the stages for the CI/CD pipeline
# Jobs in earlier stages are run before jobs in later stages.
stages:
  # - build
  - test

# Global variables, including the one from your example.
variables:
  PERSIST_IMAGE_NAME: $CSCS_REGISTRY_PATH/helloworld:$CI_COMMIT_SHORT_SHA

# YAML anchor for common rules: trigger on push to default branch (main) or merge requests
# .common_rules: &common_rules
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Trigger for all merge requests
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH   # Trigger for pushes to the default branch (e.g., main)

# YAML anchor for common tool setup (Graphviz, pip, hatch)
# This script block is run before the main 'script' in jobs that use it.
.common_tool_setup: &common_tool_setup
  before_script:
    # Update package list and install Graphviz system dependencies
    # '--no-install-recommends' reduces unnecessary packages
    - apt-get update -y && apt-get install -y --no-install-recommends graphviz graphviz-dev rabbitmq-server
    # Upgrade pip to the latest version
    - pip install --upgrade pip
    # Install hatch, the Python project manager
    - pip install hatch

# New build job from your example
# build_job:
#   stage: build
#   extends: .container-builder-cscs-zen2 # This should be defined in the included remote file
#   variables:
#     DOCKERFILE: ci/docker/Dockerfile.build # Path to your Dockerfile

# Test job: Runs tests across multiple Python versions
test_job:
  stage: test
  timeout: 30 minutes # Job timeout
  # rules:
  #   - !reference [.common_rules, rules] # Apply common trigger rules
  # Define the matrix for Python versions.
  # The job will be run once for each Python version specified.
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.12"]
      # - PYTHON_VERSION: ["3.10", "3.11", "3.12", "3.13"]
        # AIIDA_VERSION: "stable" # Example if you need to use this matrix variable

  # Use a specific Python Docker image based on the matrix variable.
  # The '-slim' variant is smaller and often preferred for CI.
  image: python:${PYTHON_VERSION}-slim

  # Variables specific to this job
  variables:
    PYTEST_ADDOPTS: "--durations=0" # Additional options for pytest

  # Inherit and run common tool setup
  <<: *common_tool_setup

  # Main script for the test job
  script:
    # Install the current package and its dependencies
    - pip install .
    # 'verdi presto' is a command from the original workflow, assumed to be project-specific setup
    - verdi presto --profile-name "ci"
    # Run the test suite using hatch.
    # - hatch test -m "" --parallel --cover


  # Cache dependencies to speed up subsequent pipelines
  # cache:
  #   key:
  #     # Cache key depends on the Python version and the content of pyproject.toml
  #     files:
  #       - pyproject.toml
  #     prefix: ${CI_JOB_NAME}-${PYTHON_VERSION} # Prefix with job name and Python version
  #   paths:
  #     - .hatch       # Cache hatch environments
  #     - .cache/pip   # Cache downloaded pip packages
  #   policy: pull-push # Pull cache at start, push at end on success